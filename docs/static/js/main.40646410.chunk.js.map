{"version":3,"sources":["services/transformWeather.js","constants/weather.js","services/transformForecast.js","actions/index.js","reducers/cities.js","reducers/index.js","reducers/city.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/WeatherData.js","components/WeatherLocation/WeatherLocation.js","components/LocationList.js","containers/LocationListContainer.js","components/ForecastItem/index.js","components/ForecastExtended.js","containers/ForecastExtendedContainer.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["transformWeather","weather_data","kelvin","main","humidity","temp","speed","wind","weatherState","weather","id","getWeatherState","temperature","Number","convert","from","to","toFixed","transformForecast","data","list","filter","item","moment","unix","dt","utc","hour","map","weekDay","format","SET_CITY","SET_FORECAST_DATA","GET_WEATHER_CITY","SET_WEATHER_CITY","api_key","setSelectedCity","payload","dispatch","getState","url_forecast","type","setCity","state","date","cities","forecastDataDate","now","Date","fetch","then","json","forecastData","console","log","setForecastData","city","setWeather","forEach","getWeatherCity","api_weather","setWeatherCity","getForecastDataFromCities","createSelector","getWeatherCities","toPairs","key","name","combineReducers","action","getCity","_getForecastDataFromCities","_getWeatherCities","Location","className","WeatherExtraInfo","icons","WeatherTemperature","icon","size","getweatherIcon","WeatherData","WeatherLocation","onWeatherLocationClick","onClick","CircularProgress","LocationList","onSelectedLocation","handleWeatherLocationClick","strToComponents","LocationListContainer","handleSelectedLocation","props","this","citiesWeather","Component","connect","bindActionCreators","actions","ForecastItem","ForecastExtended","forecast","renderForecastItemDays","ForecastExtendedContainer","App","AppBar","position","Toolbar","Typography","variant","color","xs","md","Paper","elevation","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40646410.chunk.js","sourcesContent":["import convert from \"convert-units\";\r\nimport { SUN, CLOUD, RAIN, SNOW, THUNDER, DRIZZLE } from \"./../constants/weather\";\r\n\r\nconst getTemp = (kelvin) => {\r\n\treturn Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(0));\r\n};\r\n\r\nconst getWeatherState = (weather) => {\r\n\tconst { id } = weather;\r\n\tif (id < 300) {\r\n\t\treturn THUNDER;\r\n\t} else if (id < 400) {\r\n\t\treturn DRIZZLE;\r\n\t} else if (id < 600) {\r\n\t\treturn RAIN;\r\n\t} else if (id < 700) {\r\n\t\treturn SNOW;\r\n\t} else if (id === 800) {\r\n\t\treturn SUN;\r\n\t} else {\r\n\t\treturn CLOUD;\r\n\t}\r\n};\r\n\r\nconst transformWeather = (weather_data) => {\r\n\tconst { humidity, temp } = weather_data.main;\r\n\tconst { speed } = weather_data.wind;\r\n\tconst weatherState = getWeatherState(weather_data.weather[0]);\r\n\tconst temperature = getTemp(temp);\r\n\r\n\tconst data = {\r\n\t\thumidity,\r\n\t\ttemperature,\r\n\t\tweatherState,\r\n\t\twind: `${speed} m/s`,\r\n\t};\r\n\treturn data;\r\n};\r\n\r\nexport default transformWeather;\r\n","export const CLOUD = \"cloud\";\r\nexport const SUN = \"sun\";\r\nexport const RAIN = \"rain\";\r\nexport const SNOW = \"snow\";\r\nexport const THUNDER = \"thunder\";\r\nexport const DRIZZLE = \"drizzle\";","import moment from 'moment';\r\nimport 'moment/locale/es';\r\nimport transformWeather from './transformWeather';\r\n\r\nconst transformForecast = (data) => (\r\n\tdata.list.filter(item => (\r\n\t\tmoment.unix(item.dt).utc().hour() === 6 ||\r\n\t\tmoment.unix(item.dt).utc().hour() === 12 ||\r\n\t\tmoment.unix(item.dt).utc().hour() === 18\r\n\r\n\t)).map(item => ({\r\n\t\tweekDay: moment.unix(item.dt).format('ddd'),\r\n\t\thour: moment.unix(item.dt).hour(),\r\n\t\tdata: transformWeather(item)\r\n\t}\r\n\t))\r\n);\r\n\r\nexport default transformForecast;","import transformForecast from './../services/transformForecast';\r\nimport transformWeather from './../services/transformWeather';\r\n\r\nexport const SET_CITY = 'SET_CITY';\r\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\r\n\r\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\r\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY';\r\n\r\nconst setCity = payload => ({ type: SET_CITY, payload });     // actionCreator\r\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload });\r\n\r\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload });\r\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload });\r\n\r\n\r\nconst api_key = \"ed2b42d5d4f13ff07046ba9a40fdae8a\";\r\nconst url = \"http://api.openweathermap.org/data/2.5/forecast\";\r\nconst url_weather = \"http://api.openweathermap.org/data/2.5/weather\";\r\n\r\nexport const setSelectedCity = payload => {\r\n\r\n\treturn (dispatch, getState) => {\r\n\t\tconst url_forecast = `${url}?q=${payload}&appid=${api_key}`;\r\n\r\n\t\t//activar en el estado un indicador de busqueda de datos\r\n\t\tdispatch(setCity(payload));\r\n\r\n\t\tconst state = getState();\r\n\t\tconst date = state.cities[payload] && state.cities[payload].forecastDataDate;\r\n\r\n\t\tconst now = new Date();\r\n\t\tif (date && (now - date) < 1 * 60 * 1000) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\treturn fetch(url_forecast).then(\r\n\t\t\tdata => (data.json())\r\n\t\t).then(\r\n\t\t\tweather_data => {\r\n\r\n\t\t\t\tconst forecastData = transformForecast(weather_data); //datos del pronóstico extendido\r\n\t\t\t\tconsole.log(forecastData);\r\n\r\n\t\t\t\t//modificar el estado con el resultado d ela promise (fetch el http request)\r\n\t\t\t\tdispatch(setForecastData({ city: payload, forecastData }));\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// action que se ejecuatara en otro tiempo gracias al middleware\r\n\t};\r\n};\r\n\r\nexport const setWeather = payload => {\r\n\treturn dispatch => {\r\n\t\tpayload.forEach(city => {\r\n\r\n\t\t\tdispatch(getWeatherCity(city));\r\n\r\n\t\t\t//const { city } = this.state;\r\n\t\t\tconst api_weather = `${url_weather}?q=${city}&appid=${api_key}`;\r\n\r\n\t\t\tfetch(api_weather).then(data => {\r\n\t\t\t\treturn data.json();\r\n\t\t\t}).then(weather_data => {\r\n\t\t\t\tconst weather = transformWeather(weather_data);\r\n\r\n\t\t\t\tdispatch(setWeatherCity({ city, weather }));\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\r\n};","import { createSelector } from 'reselect';\r\nimport toPairs from 'lodash.topairs';\r\nimport { SET_FORECAST_DATA, SET_WEATHER_CITY, GET_WEATHER_CITY } from './../actions';\r\n\r\nexport const cities = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_FORECAST_DATA: {\r\n\t\t\tconst { city, forecastData } = action.payload;\r\n\t\t\treturn { ...state, [city]: { ...state[city], forecastData, forecastDataDate: new Date() } };\r\n\t\t}\r\n\t\tcase GET_WEATHER_CITY: {\r\n\t\t\tconst city = action.payload;\r\n\t\t\treturn { ...state, [city]: { ...state[city], weather: null } };\r\n\t\t}\r\n\r\n\t\tcase SET_WEATHER_CITY: {\r\n\t\t\tconst { city, weather } = action.payload;\r\n\t\t\treturn { ...state, [city]: { ...state[city], weather } };\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getForecastDataFromCities =\r\n\tcreateSelector((state, city) => state[city] && state[city].forecastData, forecastData => forecastData);\r\n\r\nconst fromObjectToArray = cities => (toPairs(cities).map(([key, value]) => ({ key, name: key, data: value.weather })));\r\n\r\nexport const getWeatherCities =\r\n\tcreateSelector(state => fromObjectToArray(state), cities => cities);\r\n","import { combineReducers } from 'redux';\r\nimport { createSelector } from 'reselect';\r\nimport {\r\n\tcities,\r\n\tgetForecastDataFromCities as _getForecastDataFromCities,\r\n\tgetWeatherCities as _getWeatherCities\r\n} from './cities';\r\n\r\nimport { city } from './city';\r\n\r\nexport default combineReducers({\r\n\tcities,\r\n\tcity\r\n});\r\n\r\nexport const getCity = createSelector(state => state.city, city => city);\r\nexport const getForecastDataFromCities = createSelector(state => state.cities, getCity, _getForecastDataFromCities);\r\nexport const getWeatherCities = createSelector(state => state.cities, _getWeatherCities);","import { SET_CITY } from './../actions';\r\n\r\nexport const city = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CITY:\r\n\t\t\treturn action.payload;\r\n\t\t//un reducer debe ser una funcion pura responde solo a los valores pasados por parametro,evitar sideefects\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\n// Destructuring city = props.city\r\n//const { city } = props;\r\n\r\nconst Location = ({ city }) => (\r\n  <div className=\"locationContainer\">\r\n    <h1>{city}</h1>\r\n  </div>\r\n);\r\n\r\nLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => (\r\n  <div className=\"weatherExtraInfoCont\">\r\n    <span className=\"extraInfoText\">{`Humedad: ${humidity}% `} </span>\r\n\r\n    <span className=\"extraInfoText\">{`Vientos: ${wind}  `}</span>\r\n  </div>\r\n);\r\n\r\nWeatherExtraInfo.propTypes = {\r\n  humidity: PropTypes.number.isRequired,\r\n  wind: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default WeatherExtraInfo;\r\n","import React from \"react\";\r\nimport WeatherIcons from \"react-weathericons\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n\tCLOUD,\r\n\tSUN,\r\n\tRAIN,\r\n\tSNOW,\r\n\tTHUNDER,\r\n\tDRIZZLE,\r\n} from \"./../../../constants/weather\";\r\nimport \"./styles.css\";\r\n\r\nconst icons = {\r\n\t[CLOUD]: \"cloud\",\r\n\t[SUN]: \"day-sunny\",\r\n\t[RAIN]: \"rain\",\r\n\t[SNOW]: \"snow\",\r\n\t[THUNDER]: \"day-thunderstorm\",\r\n\t[DRIZZLE]: \"day-showers\",\r\n};\r\n//funcion requerida por el componente WeatherTemperature\r\nconst getweatherIcon = (weatherState) => {\r\n\tconst icon = icons[weatherState];\r\n\r\n\tconst sizeIcon = \"3x\";\r\n\tif (icon)\r\n\t\treturn <WeatherIcons className=\"wIcon\" name={icon} size={sizeIcon} />;\r\n\telse\r\n\t\treturn (\r\n\t\t\t<WeatherIcons className=\"wIcon\" name={\"day-sunny\"} size={sizeIcon} />\r\n\t\t);\r\n};\r\n//componente\r\nconst WeatherTemperature = ({ temperature, weatherState }) => (\r\n\t<div className=\"weatherTemperatureCont\">\r\n\t\t{getweatherIcon(weatherState)}\r\n\t\t<span className=\"temperature\">{` ${temperature}`}</span>\r\n\t\t<span className=\"temperatureType\">{`C°`}</span>\r\n\t</div>\r\n);\r\n\r\n//usando ProtoTypes para los parametros requeridos\r\n\r\nWeatherTemperature.propTypes = {\r\n\ttemperature: PropTypes.number.isRequired,\r\n\tweatherState: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default WeatherTemperature;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherExtraInfo from \"./WeatherExtraInfo\";\r\nimport WeatherTemperature from \"./WeatherTemperature\";\r\n\r\nimport {\r\n  CLOUD,\r\n  CLOUDY,\r\n  SUN,\r\n  RAIN,\r\n  SNOW,\r\n  WINDY,\r\n} from \"../../../constants/weather\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherData = ({\r\n  data: { temperature, weatherState, humidity, wind },\r\n}) => (\r\n  <div className=\"weatherDataCont\">\r\n    <WeatherTemperature temperature={temperature} weatherState={weatherState} />\r\n    <WeatherExtraInfo humidity={humidity} wind={wind} />\r\n  </div>\r\n);\r\n//uso de prooTypes.shape()\r\nWeatherData.propTypes = {\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired,\r\n  }),\r\n};\r\n\r\nexport default WeatherData;\r\n","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport getUrlWeatherByCity from \"./../../services/getUrlWeatherByCity\";\r\n//import { api_weather } from \"./../../constants/api_urls\";\r\n//import transformWeather from \"./../../services/transformWeather\";\r\nimport Location from \"./Location\";\r\nimport WeatherData from \"./WeatherData/WeatherData\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherLocation = ({ onWeatherLocationClick, city, data }) => (\r\n\t<div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\r\n\t\t<Location city={city} />\r\n\t\t{data ? <WeatherData data={data} /> : <CircularProgress size={50} />}\r\n\t</div>\r\n);\r\n\r\nWeatherLocation.propTypes = {\r\n\tcity: PropTypes.string.isRequired,\r\n\tonWeatherLocationClick: PropTypes.func.isRequired,\r\n\tdata: PropTypes.shape({\r\n\t\ttemperature: PropTypes.number.isRequired,\r\n\t\tweatherState: PropTypes.string.isRequired,\r\n\t\thumidity: PropTypes.number.isRequired,\r\n\t\twind: PropTypes.string.isRequired,\r\n\t}),\r\n}\r\nexport default WeatherLocation;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherLocation from './WeatherLocation/WeatherLocation';\r\nimport './styles.css';\r\n\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n\tconst handleWeatherLocationClick = city => {\r\n\t\tconsole.log(\"handleWeatherLocationClick\");\r\n\t\tonSelectedLocation(city);\r\n\t}\r\n\r\n\tconst strToComponents = cities => (\r\n\t\tcities.map((city) => (<WeatherLocation\r\n\t\t\tkey={city.key}\r\n\t\t\tcity={city.name}\r\n\t\t\tonWeatherLocationClick={() => handleWeatherLocationClick(city.name)}\r\n\t\t\tdata={city.data} />))\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"locationList\">\r\n\t\t\t{strToComponents(cities)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nLocationList.propTypes = {\r\n\tcities: PropTypes.array.isRequired,\r\n\tonSelectedLocation: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default LocationList;","import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n// import { setSelectedCity, setWeather } from './../actions';\r\nimport * as actions from './../actions';\r\nimport { getWeatherCities, getCity } from './../reducers';\r\nimport LocationList from \"./../components/LocationList\";\r\n\r\nclass LocationListContainer extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { setWeather, setSelectedCity, cities, city } = this.props;\r\n\t\tsetWeather(cities);\r\n\t\tsetSelectedCity(city);\r\n\t}\r\n\r\n\thandleSelectedLocation = city => {\r\n\t\tthis.props.setSelectedCity(city);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<LocationList\r\n\t\t\t\tcities={this.props.citiesWeather}\r\n\t\t\t\tonSelectedLocation={this.handleSelectedLocation}>\r\n\t\t\t</LocationList>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nLocationListContainer.propTypes = {\r\n\tsetSelectedCity: PropTypes.func.isRequired,\r\n\tsetWeather: PropTypes.func.isRequired,\r\n\tcities: PropTypes.array.isRequired,\r\n\tcitiesWeather: PropTypes.array.isRequired,\r\n\tcity: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\r\n// const mapDispatchToProps = dispatch => ({\r\n// \tsetSelectedCity: value => dispatch(setSelectedCity(value)),\r\n// \tsetWeather: cities => dispatch(setWeather(cities)),\r\n\r\n// });\r\n\r\nconst mapStateToProps = state => ({\r\n\tcitiesWeather: getWeatherCities(state),\r\n\tcity: getCity(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherData from './../WeatherLocation/WeatherData/WeatherData';\r\n\r\n\r\n\r\nconst ForecastItem = ({ weekDay, hour, data }) => (\r\n\t<div>\r\n\t\t<h2>{weekDay}  --  {hour} hs</h2>\r\n\t\t<WeatherData data={data}></WeatherData>\r\n\t</div>\r\n\r\n);\r\n\r\nForecastItem.propTypes = {\r\n\tweekDay: PropTypes.string.isRequired,\r\n\thour: PropTypes.number.isRequired,\r\n\tdata: PropTypes.shape({\r\n\t\ttemperature: PropTypes.number.isRequired,\r\n\t\tweatherState: PropTypes.string.isRequired,\r\n\t\thumidity: PropTypes.number.isRequired,\r\n\t\twind: PropTypes.string.isRequired,\r\n\t}),\r\n}\r\n\r\nexport default ForecastItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ForecastItem from './ForecastItem';\r\nimport transformForecast from './../services/transformForecast';\r\nimport './styles.css';\r\n\r\nconst renderForecastItemDays = (forecastData) => {\r\n\t// return <h1>\"Render Items\"</h1>;\r\n\treturn forecastData.map(forecast => (\r\n\t\t<ForecastItem\r\n\t\t\tkey={`${forecast.weekDay}${forecast.hour}`}\r\n\t\t\tweekDay={forecast.weekDay}\r\n\t\t\thour={forecast.hour}\r\n\t\t\tdata={forecast.data}>\r\n\t\t</ForecastItem>));\r\n\r\n}\r\n\r\nconst renderProgress = () => {\r\n\treturn <h3>\"Cargando Pronostico Extendido...\"</h3>;\r\n}\r\n\r\nconst ForecastExtended = ({ city, forecastData }) => (\r\n\r\n\t<div>\r\n\t\t<h2 className='forecast-title'>\r\n\t\t\tPronostico Extendido para {city}\r\n\t\t</h2>\r\n\t\t{forecastData ?\r\n\t\t\trenderForecastItemDays(forecastData) :\r\n\t\t\trenderProgress()\r\n\t\t}\r\n\t</div>\r\n);\r\n\r\nForecastExtended.propTypes = {\r\n\tcity: PropTypes.string.isRequired,\r\n\tforecastData: PropTypes.array,\r\n}\r\n\r\nexport default ForecastExtended;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getForecastDataFromCities, getCity } from './../reducers';\r\nimport ForecastExtended from './../components/ForecastExtended';\r\n\r\nclass ForecastExtendedContainer extends Component {\r\n\trender() {\r\n\t\tconst { city, forecastData } = this.props;\r\n\t\treturn (\r\n\t\t\tcity &&\r\n\t\t\t<ForecastExtended city={city} forecastData={forecastData} />\r\n\r\n\t\t);\r\n\t}\r\n}\r\n\r\nForecastExtendedContainer.propTypes = {\r\n\tcity: PropTypes.string.isRequired,\r\n\tforecastData: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state =>\r\n\t({\r\n\t\tcity: getCity(state), forecastData: getForecastDataFromCities(state)\r\n\t});\r\n\r\nexport default connect(mapStateToProps, null)(ForecastExtendedContainer);","import React, { Component } from \"react\";\n// import { connect } from 'react-redux';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Typography, Toolbar } from \"@material-ui/core\";\nimport { Grid, Col, Row } from 'react-flexbox-grid';\n// import PropTypes from 'prop-types';\nimport LocationListContainer from \"./containers/LocationListContainer\";\n// import { setCity } from './actions';\n//import { store } from './store';\nimport \"./App.css\";\nimport ForecastExtendedContainer from \"./containers/ForecastExtendedContainer\";\n\n\nconst cities = [\n\t'Santa Cruz de la Sierra,bo',\n\t'Potosi,bo',\n\t'Sucre,bo',\n\t'La Paz,bo',\n\t'Cochabamba,bo',\n\t'Tarija,bo',\n\t'Pando,bo',\n\t'Beni,bo',\n\t'Oruro,bo',\n];\n\n\nclass App extends Component {\n\n\trender() {\n\n\t\treturn (\n\t\t\t<Grid >\n\t\t\t\t<Row>\n\t\t\t\t\t<AppBar position='sticky'  >\n\t\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t\t<Typography variant='h3' color='inherit'>\n\t\t\t\t\t\t\t\tWheather App\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t</AppBar>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col xs={12} md={6}>\n\t\t\t\t\t\t<LocationListContainer\n\t\t\t\t\t\t\tcities={cities}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t</LocationListContainer>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col xs={12} md={6}>\n\t\t\t\t\t\t<Paper elevation={4}>\n\t\t\t\t\t\t\t<div className=\"details\">\n\t\t\t\t\t\t\t\t<ForecastExtendedContainer ></ForecastExtendedContainer>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Paper>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\n\n\t\t\t</Grid>\n\t\t);\n\t}\n}\n\n\n\n//validamos que el tipo setCity sea del tipo funcion requerido\n\n// App.propTypes = {\n// \tsetCity: PropTypes.func.isRequired,\n// }\n/* mapDispatchToProps retorna un \n 'objeto' que injecta 'funciones' o una 'funcion' a las propiedades\n 'props' del componente App */\n\n// const mapDispatchToProps = dispatch => ({\n\n// \tsetCity: value => dispatch(setCity(value))\n\n//el primer setCity es el nommbre de la propiedad tipo funcion dentro de ese objeto\n// });\n\nexport default App;\n\n/*connect es un HighOrderComponent que es una funcion\n que toma como parametro un componente que retorna otro componente */\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './../reducers';\r\n\r\nconst initialState = {\r\n\tcity: 'Sucre,bo'\r\n};\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}